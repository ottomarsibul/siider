import kotlin.random.Random

// number of dices and sets
const val N = 5 // number of dices
const val M = 100000 // how many times

// Basic dices
fun rollDiceNormal(): Int { // fun=def; no arguments; return type
    return (1..N).sumBy { Random.nextInt(1, 7) } 
    //1 until n for cycle where we are summing 1 until 6 ints
}

// rollDiceJingled mechanism
fun rollDiceJingled(): Int {
//val probabilities = listOf(1, 2, 3, 4, 5, 6)
    return (1..N).sumBy {
        // 1 until n cycle
        when (Random.nextInt(21) + 1) { //0 until 20 + 1
            in 1..1 -> 1 //1
            in 2..3 -> 2 // 2 3
            in 4..6 -> 3 //4 5 6
            in 7..10 -> 4
            in 11..15 -> 5
            else -> 6 //16 17 18 19 20 21->6 times more than x
        }
    }
}

// Histogrammi kuvamine
fun printHistogram(results: Map<Int, Int>, title: String) {
    //argguments are int map and title
    println(title)
    val maxFrequency = results.values.maxOrNull() ?: 0 
    //map values; when no results then 0
    for ((sum, count) in results.toSortedMap()) { //passes sorted map
        val stars = "*".repeat((count * 50) / maxFrequency) 
        //coef for *-s
        println("$sum: $stars ($count)") 
        //5: **** (925)
    }
}

// normal dice
fun experimentNormal() {
    val results = mutableMapOf<Int, Int>()
    for (i in 1..M) { //from 1 to 100 000
        val sum = rollDiceNormal() //sum
        results[sum] = results.getOrDefault(sum, 0) + 1 //update sum result
    }
    printHistogram(results, "Normal Dice Rolls")
}

// same like normal but with jingled
fun experimentJingled() {
    val results = mutableMapOf<Int, Int>() //map that can be changed
    for (i in 1..M) {  
        val sum = rollDiceJingled()
        results[sum] = results.getOrDefault(sum, 0) + 1
    }
    printHistogram(results, "Jingled Dice Rolls")
} 

// main class
fun main() {
    experimentNormal()
    experimentJingled()
}
